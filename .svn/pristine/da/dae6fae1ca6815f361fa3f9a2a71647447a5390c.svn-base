# _*_ coding: utf-8 _*_

from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from forms import UserCommentForm
from models import UserComment, UserProfile, FavoriteUser
from posts.models import Book, Branch
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.contrib.auth.decorators import login_required

"""
@csrf_exempt
def index(request):
    # TODO: Exception Handling
    # check username, email, password, duplicatied ...

    if request.method == 'POST':
        username = request.POST['username']
        email = request.POST['email']
        password = request.POST['password']

        user = User.objects.create(username=username, email=email, password=password)
        UserProfile.objects.create(user=user)

        print username + ' ' + email
        return HttpResponse(email)
    else:
        return HttpResponse('')
"""
def signup_page(request):
    return render_to_response('accounts/signup.html', RequestContext(request, { 'form': UserCreationForm() }))

def redirect_to_login(request):
    return HttpResponseRedirect('/')

def signup_confirmed(request):
    if request.method != 'POST':
        return HttpResponseRedirect('/')

    signup_form = UserCreationForm(request.POST)

    if signup_form.is_valid():
        signup_form.clean_username()
        signup_form.clean_password2()
        user=signup_form.save()

        # TODO: 회원가입이 완료되었다는 메시지

        # UserProfile 이어주기
        UserProfile.objects.create(user=user)

    else:
        return render_to_response('accounts/signup.html', RequestContext(request, { 'form': signup_form, 'errors': signup_form.errors }))

    return HttpResponseRedirect('/')


@login_required(login_url='/accounts/login/')
def get_userinfo(request, author_id):
    # fields = ('user', 'writer', 'text',)

    try:
        owner = User.objects.get(id=author_id)
    except User.DoesNotExist:
        raise Http404

    # TODO: Make function and move to there
    if request.method == "POST":
        uinfo_form = UserCommentForm(request.POST)
        print uinfo_form.errors
        if uinfo_form.is_valid():
            uinfo_form.save()

            return HttpResponseRedirect('/accounts/userinfo/' + author_id)

    usercomments = UserComment.objects.filter(user=owner)

    # 친구 관계가 맺어져 있는지 일단 검사
    is_friend = False
    try:
        fu = FavoriteUser.objects.get(user=owner, follower=request.user)
        if fu.follower == request.user:
            is_friend = True
    except FavoriteUser.DoesNotExist:
        pass
        
    uinfo_form = UserCommentForm({'user': owner, 
                                  'writer': request.user})

    # 집필한 책  / 참여 브랜치  / 따르는 유저 수 
    numofBook = Book.objects.filter(creator=owner).exclude(root_branch=None).count()
    numofBranch = Branch.objects.filter(author=owner, is_temporary=False).count()
    numofFollow = FavoriteUser.objects.filter(user=owner).count()

    return render_to_response("accounts/userinfo.html", RequestContext(request, {
            'form': uinfo_form,
            'owner': owner,
            'is_self': owner==request.user,
            'is_friend': is_friend,
            'usercomments': usercomments,
            'numofBook': numofBook,
            'numofBranch': numofBranch,
            'numofFollow': numofFollow,
        }))

@login_required(login_url='/accounts/login/')
def add_favauthor(request, favauthor, addornot):
    try:
        fav = User.objects.get(id=favauthor)
    except User.DoesNotExist:
        raise Http404    

    if addornot == '1':
        FavoriteUser.objects.create(user=fav, follower=request.user,
                                    user_str=fav.nickname, follower_str=request.user.nickname)
    else: #0
        try:
            relation = FavoriteUser.objects.get(user=fav, follower=request.user)
        except FavoriteUser.DoesNotExist:
            raise Http404

        relation.delete()

    return HttpResponseRedirect('/accounts/userinfo/' + fav.id)

@login_required(login_url='/accounts/login/')
def show_favauthor(request):
    fav_authors = FavoriteUser.objects.filter(follower=request.user)

    return render_to_response("accounts/show_favauthor.html", RequestContext(request, {
            'fav_authors': fav_authors
        }))